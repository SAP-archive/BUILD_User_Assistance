/*! SearchHighlight for DataTables v1.0.1
 * 2014 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     SearchHighlight
 * @description Search term highlighter for DataTables
 * @version     1.0.1
 * @file        dataTables.searchHighlight.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014 SpryMedia Ltd.
 * 
 * License      MIT - http://datatables.net/license/mit
 *
 * This feature plug-in for DataTables will highlight search terms in the
 * DataTable as they are entered into the main search input element, or via the
 * `search()` API method.
 *
 * It depends upon the jQuery Highlight plug-in by Bartek Szopka:
 * 	  http://bartaz.github.io/sandbox.js/jquery.highlight.js
 *
 * Search highlighting in DataTables can be enabled by:
 *
 * * Adding the class `searchHighlight` to the HTML table
 * * Setting the `searchHighlight` parameter in the DataTables initialisation to
 *   be true
 * * Setting the `searchHighlight` parameter to be true in the DataTables
 *   defaults (thus causing all tables to have this feature) - i.e.
 *   `$.fn.dataTable.defaults.searchHighlight = true`.
 *
 * For more detailed information please see:
 *     http://datatables.net/blog/2014-10-22
 */

(function(window, document, $){


function highlight( body, table, selectHighlight)
{
	// Removing the old highlighting first
	body.unhighlight();
	// Don't highlight the "not found" row, so we get the rows using the api
	if ( table.rows( { filter: 'applied' } ).data().length ) {
              body.highlight( $.trim( table.search() ).split(/\s+/) );

              //mh: get the number of columns in the table
              var colCount = body.find('tr')[0].cells.length;
              
              var selectColumns = []; 

              $.each($(table.header()).find('th').has('.select_filter'), function () {
              	selectColumns.push($(this).index());
              });

              // console.log(selectColumns);
              //mh: use boring old js to loop through the cells and highlight
              for (i=0;i<colCount;i++) {
              		if ( !($.inArray(i, selectColumns) >= 0)){
                     table.column(i).nodes().to$().highlight($.trim(table.column(i).search()).split(/\s+/) );
					}
					//highlights cells if there are no child elements: <td>text text text <p>this child element should not be here</p> </td>
                 	else if (selectHighlight){
						var search = table.column(i).search();
						var re = new RegExp(table.column(i).search(), 'im');
						var hey = table.column(i).nodes().to$().each(
							function highlightRegex() {
								if (this.nodeType === 1 && this.childNodes && search.length>0 && search != "(^|;)(<.[^(><.)]+>|\\s)*?(<.[^(><.)]+>|\\s)*?(;|$)") { //search should not be blank
									for (var i = 0; i< this.childNodes.length; i++) {
										var node = this.childNodes[i];
										var pos = re.exec(node.data);
										if (node.nodeType === 3 && pos != null && node.data.length > 0) {
											var match = re.exec(node.data);
											var endPos = match[0].length;
											//if the first character is a semicolon, do not highlight it. ()
											if (match[0].charAt(0) === ";") {
												pos.index++;
												endPos--;
											}
											var span = document.createElement('span');
											span.className = 'dt_highlight';
											var middle = node.splitText(pos.index);
											var end = middle.splitText(endPos);
											var middleClone = middle.cloneNode(true);
											span.appendChild(middleClone);
											middle.parentNode.replaceChild(span,middle);
										}
									}
								}
							} 
						);

                 	}
              }
	}

}

// Listen for DataTables initialisations
$(document).on( 'init.dt.dth', function (e, settings, json) {
	var table = new $.fn.dataTable.Api( settings );
	var body = $( table.table().body() );
	var tables = $.fn.dataTable.fnTables(true);
	var selectHighlight = settings.oInit.selectHighlight;
	if (
		$( table.table().node() ).hasClass( 'searchHighlight' ) || // table has class
		settings.oInit.searchHighlight                          || // option specified
		$.fn.dataTable.defaults.searchHighlight                    // default set
	) {
		table
			.on( 'draw.dt.dth column-visibility.dt.dth column-reorder.dt.dth', function () {
				highlight( body, table, selectHighlight );
			} )
			.on( 'destroy', function () {
				// Remove event handler
				table.off( 'draw.dt.dth column-visibility.dt.dth column-reorder.dt.dth' );
			} );
		
		// initial highlight for state saved conditions and initial states
		if ( table.search() ) {
			highlight( body, table, selectHighlight );
		}
	}
} );

})(window, document, jQuery);